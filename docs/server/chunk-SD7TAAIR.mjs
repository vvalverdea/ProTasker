import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{b as m,h as v,i as I}from"./chunk-DUU7IDJR.mjs";import{b as i,d as f}from"./chunk-HOM3E74A.mjs";import{b as d,d as S,g as y}from"./chunk-WHYOH54Q.mjs";import{a as c,b as u,e as a}from"./chunk-YJ4N4I6Q.mjs";var R,g,A=a(()=>{"use strict";f();y();R=(e,t,r)=>{let n={EcsContainer:async s=>{let{fromHttp:o}=await import("./chunk-VNVTYBMD.mjs"),{fromContainerMetadata:_}=await import("./chunk-2K6JVJT2.mjs");return r?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>S(o(s??{}),_(s))().then(g)},Ec2InstanceMetadata:async s=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:o}=await import("./chunk-2K6JVJT2.mjs");return async()=>o(s)().then(g)},Environment:async s=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:o}=await import("./chunk-4SLNS2YK.mjs");return async()=>o(s)().then(g)}};if(e in n)return n[e];throw new d(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:r})},g=e=>i(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p")});var O,q,G,x,b,h=a(()=>{"use strict";f();y();I();A();E();O=(e,{profile:t="default",logger:r}={})=>!!e&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(q(e,{profile:t,logger:r})||G(e,{profile:t,logger:r})),q=(e,{profile:t,logger:r})=>{let n=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return n&&r?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),n},G=(e,{profile:t,logger:r})=>{let n=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return n&&r?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),n},x=async(e,t,r,n={})=>{r.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let s=t[e];if(!r.roleAssumer){let{getDefaultRoleAssumer:l}=await import("./chunk-4MRM3OS2.mjs");r.roleAssumer=l(u(c({},r.clientConfig),{credentialProviderLogger:r.logger,parentClientConfig:r?.parentClientConfig}),r.clientPlugins)}let{source_profile:o}=s;if(o&&o in n)throw new d(`Detected a cycle attempting to resolve credentials for profile ${m(r)}. Profiles visited: `+Object.keys(n).join(", "),{logger:r.logger});r.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${o?`source_profile=[${o}]`:`profile=[${e}]`}`);let _=o?C(o,t,r,u(c({},n),{[o]:!0}),b(t[o]??{})):(await R(s.credential_source,e,r.logger)(r))();if(b(s))return _.then(l=>i(l,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let l={RoleArn:s.role_arn,RoleSessionName:s.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:s.external_id,DurationSeconds:parseInt(s.duration_seconds||"3600",10)},{mfa_serial:p}=s;if(p){if(!r.mfaCodeProvider)throw new d(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:r.logger,tryNextLink:!1});l.SerialNumber=p,l.TokenCode=await r.mfaCodeProvider(p)}let K=await _;return r.roleAssumer(K,l).then(U=>i(U,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},b=e=>!e.role_arn&&!!e.credential_source});var k,L,F=a(()=>{"use strict";f();k=e=>!!e&&typeof e=="object"&&typeof e.credential_process=="string",L=async(e,t)=>import("./chunk-5QV7ONRM.mjs").then(({fromProcess:r})=>r(u(c({},e),{profile:t}))().then(n=>i(n,"CREDENTIALS_PROFILE_PROCESS","v")))});var D,T,$=a(()=>{"use strict";f();D=async(e,t,r={})=>{let{fromSSO:n}=await import("./chunk-C3YPXWAZ.mjs");return n({profile:e,logger:r.logger,parentClientConfig:r.parentClientConfig,clientConfig:r.clientConfig})().then(s=>t.sso_session?i(s,"CREDENTIALS_PROFILE_SSO","r"):i(s,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},T=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string")});var P,w,W=a(()=>{"use strict";f();P=e=>!!e&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,w=async(e,t)=>{t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let r=c(c({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token},e.aws_credential_scope&&{credentialScope:e.aws_credential_scope}),e.aws_account_id&&{accountId:e.aws_account_id});return i(r,"CREDENTIALS_PROFILE","n")}});var N,j,M=a(()=>{"use strict";f();N=e=>!!e&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,j=async(e,t)=>import("./chunk-6YEPKGW2.mjs").then(({fromTokenFile:r})=>r({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})().then(n=>i(n,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q")))});var C,E=a(()=>{"use strict";y();h();F();$();W();M();C=async(e,t,r,n={},s=!1)=>{let o=t[e];if(Object.keys(n).length>0&&P(o))return w(o,r);if(s||O(o,{profile:e,logger:r.logger}))return x(e,t,r,n);if(P(o))return w(o,r);if(N(o))return j(o,r);if(k(o))return L(r,e);if(T(o))return await D(e,o,r);throw new d(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:r.logger})}});var Se,B=a(()=>{"use strict";I();E();Se=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let t=await v(e);return C(m(e),t,e)}});var H=a(()=>{B()});export{Se as a,H as b};
