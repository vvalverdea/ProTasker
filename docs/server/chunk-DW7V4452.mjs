import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{b as E,c as W,d as v,g as N,h as I,i as R}from"./chunk-DUU7IDJR.mjs";import{b as $,d as pe}from"./chunk-HOM3E74A.mjs";import{b as c,c as l,g as d}from"./chunk-WHYOH54Q.mjs";import{a as C,b as q,e as n}from"./chunk-YJ4N4I6Q.mjs";var z,F=n(()=>{"use strict";z=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string")});var T,P=n(()=>{"use strict";T="To refresh this SSO session run 'aws sso login' with the corresponding profile."});var X,J=n(()=>{"use strict";X=async(e,s={})=>{let{SSOOIDCClient:r}=await import("./chunk-G32GUESV.mjs");return new r(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))}});var V,Y=n(()=>{"use strict";J();V=async(e,s,r={})=>{let{CreateTokenCommand:t}=await import("./chunk-G32GUESV.mjs");return(await X(s,r)).send(new t({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))}});var L,B=n(()=>{"use strict";d();P();L=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new l(`Token is expired. ${T}`,!1)}});var g,Q=n(()=>{"use strict";d();P();g=(e,s,r=!1)=>{if(typeof s>"u")throw new l(`Value not present for '${e}' in SSO Token${r?". Cannot refresh":""}. ${T}`,!1)}});import{promises as me}from"fs";var Se,Z,ee=n(()=>{"use strict";R();({writeFile:Se}=me),Z=(e,s)=>{let r=W(e),t=JSON.stringify(s,null,2);return Se(r,t)}});var oe,se,re=n(()=>{"use strict";d();R();P();Y();B();Q();ee();oe=new Date(0),se=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");let s=await I(e),r=E(e),t=s[r];if(t){if(!t.sso_session)throw new l(`Profile '${r}' is missing required property 'sso_session'.`)}else throw new l(`Profile '${r}' could not be found in shared credentials file.`,!1);let a=t.sso_session,f=(await N(e))[a];if(!f)throw new l(`Sso session '${a}' could not be found in shared credentials file.`,!1);for(let i of["sso_start_url","sso_region"])if(!f[i])throw new l(`Sso session '${a}' is missing required property '${i}'.`,!1);let m=f.sso_start_url,y=f.sso_region,o;try{o=await v(a)}catch{throw new l(`The SSO session token associated with profile=${r} was not found or is invalid. ${T}`,!1)}g("accessToken",o.accessToken),g("expiresAt",o.expiresAt);let{accessToken:S,expiresAt:h}=o,p={token:S,expiration:new Date(h)};if(p.expiration.getTime()-Date.now()>3e5)return p;if(Date.now()-oe.getTime()<30*1e3)return L(p),p;g("clientId",o.clientId,!0),g("clientSecret",o.clientSecret,!0),g("refreshToken",o.refreshToken,!0);try{oe.setTime(Date.now());let i=await V(o,y,e);g("accessToken",i.accessToken),g("expiresIn",i.expiresIn);let k=new Date(Date.now()+i.expiresIn*1e3);try{await Z(a,q(C({},o),{accessToken:i.accessToken,expiresAt:k.toISOString(),refreshToken:i.refreshToken}))}catch{}return{token:i.accessToken,expiration:k}}catch{return L(p),p}}});var te=n(()=>{"use strict";d()});var ne=n(()=>{"use strict";d()});var ie=n(()=>{"use strict";re();te();ne()});var O,b,ae=n(()=>{"use strict";pe();ie();d();R();O=!1,b=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:r,ssoRegion:t,ssoRoleName:a,ssoClient:w,clientConfig:f,parentClientConfig:m,profile:y,logger:o})=>{let S,h="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let _=await se({profile:y})();S={accessToken:_.token,expiresAt:new Date(_.expiration).toISOString()}}catch(_){throw new c(_.message,{tryNextLink:O,logger:o})}else try{S=await v(e)}catch{throw new c(`The SSO session associated with this profile is invalid. ${h}`,{tryNextLink:O,logger:o})}if(new Date(S.expiresAt).getTime()-Date.now()<=0)throw new c(`The SSO session associated with this profile has expired. ${h}`,{tryNextLink:O,logger:o});let{accessToken:p}=S,{SSOClient:i,GetRoleCredentialsCommand:k}=await import("./chunk-H6QJ7QON.mjs"),D=w||new i(Object.assign({},f??{},{logger:f?.logger??m?.logger,region:f?.region??t})),u;try{u=await D.send(new k({accountId:r,roleName:a,accessToken:p}))}catch(_){throw new c(_,{tryNextLink:O,logger:o})}let{roleCredentials:{accessKeyId:x,secretAccessKey:G,sessionToken:K,expiration:H,credentialScope:U,accountId:j}={}}=u;if(!x||!G||!K||!H)throw new c("SSO returns an invalid temporary credential.",{tryNextLink:O,logger:o});let A=C(C({accessKeyId:x,secretAccessKey:G,sessionToken:K,expiration:new Date(H)},U&&{credentialScope:U}),j&&{accountId:j});return s?$(A,"CREDENTIALS_SSO","s"):$(A,"CREDENTIALS_SSO_LEGACY","u"),A}});var ce,M=n(()=>{"use strict";d();ce=(e,s)=>{let{sso_start_url:r,sso_account_id:t,sso_region:a,sso_role_name:w}=e;if(!r||!t||!a||!w)throw new c(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e}});var co,le=n(()=>{"use strict";d();R();F();ae();M();co=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:r,ssoRegion:t,ssoRoleName:a,ssoSession:w}=e,{ssoClient:f}=e,m=E(e);if(!s&&!r&&!t&&!a&&!w){let o=(await I(e))[m];if(!o)throw new c(`Profile ${m} was not found.`,{logger:e.logger});if(!z(o))throw new c(`Profile ${m} is not configured with SSO credentials.`,{logger:e.logger});if(o?.sso_session){let u=(await N(e))[o.sso_session],x=` configurations in profile ${m} and sso-session ${o.sso_session}`;if(t&&t!==u.sso_region)throw new c("Conflicting SSO region"+x,{tryNextLink:!1,logger:e.logger});if(s&&s!==u.sso_start_url)throw new c("Conflicting SSO start_url"+x,{tryNextLink:!1,logger:e.logger});o.sso_region=u.sso_region,o.sso_start_url=u.sso_start_url}let{sso_start_url:S,sso_account_id:h,sso_region:p,sso_role_name:i,sso_session:k}=ce(o,e.logger);return b({ssoStartUrl:S,ssoSession:k,ssoAccountId:h,ssoRegion:p,ssoRoleName:i,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:m})}else{if(!s||!r||!t||!a)throw new c('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});return b({ssoStartUrl:s,ssoSession:w,ssoAccountId:r,ssoRegion:t,ssoRoleName:a,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:m})}}});var fe=n(()=>{"use strict"});var ge=n(()=>{le();F();fe();M()});export{z as a,ce as b,co as c,ge as d};
