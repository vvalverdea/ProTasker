import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{A as C,B as D,C as E,D as F,E as G,F as H,G as I,a as c,b as d,c as e,d as f,e as g,f as h,g as i,h as j,i as k,j as l,k as m,l as n,m as o,n as p,o as q,p as r,q as s,r as t,s as u,t as v,u as w,v as x,w as y,x as z,y as A,z as B}from"./chunk-RF6VV5NS.mjs";import"./chunk-P2MZKD6E.mjs";import"./chunk-7MLGPFI3.mjs";import"./chunk-UVLFOUBM.mjs";import"./chunk-OXRWZM6G.mjs";import{F as a,G as b}from"./chunk-QNKP6SCQ.mjs";import"./chunk-DUU7IDJR.mjs";import"./chunk-HOM3E74A.mjs";import"./chunk-ZAAD4LGZ.mjs";import"./chunk-WHYOH54Q.mjs";import"./chunk-YJ4N4I6Q.mjs";I();export{b as $Command,v as AssumeRoleCommand,n as AssumeRoleResponseFilterSensitiveLog,w as AssumeRoleWithSAMLCommand,o as AssumeRoleWithSAMLRequestFilterSensitiveLog,p as AssumeRoleWithSAMLResponseFilterSensitiveLog,x as AssumeRoleWithWebIdentityCommand,q as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,r as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,y as AssumeRootCommand,s as AssumeRootResponseFilterSensitiveLog,m as CredentialsFilterSensitiveLog,z as DecodeAuthorizationMessageCommand,e as ExpiredTokenException,A as GetAccessKeyInfoCommand,B as GetCallerIdentityCommand,C as GetFederationTokenCommand,t as GetFederationTokenResponseFilterSensitiveLog,D as GetSessionTokenCommand,u as GetSessionTokenResponseFilterSensitiveLog,k as IDPCommunicationErrorException,i as IDPRejectedClaimException,l as InvalidAuthorizationMessageException,j as InvalidIdentityTokenException,f as MalformedPolicyDocumentException,g as PackedPolicyTooLargeException,h as RegionDisabledException,E as STS,c as STSClient,d as STSServiceException,a as __Client,H as decorateDefaultCredentialProvider,F as getDefaultRoleAssumer,G as getDefaultRoleAssumerWithWebIdentity};
