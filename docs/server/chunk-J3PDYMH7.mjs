import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{b as f,h as u,i as _}from"./chunk-DUU7IDJR.mjs";import{b as p,d as y}from"./chunk-HOM3E74A.mjs";import{b as d,g as S}from"./chunk-WHYOH54Q.mjs";import{a as n,e as i}from"./chunk-YJ4N4I6Q.mjs";var w,P=i(()=>{"use strict";y();w=(r,e,o)=>{if(e.Version!==1)throw Error(`Profile ${r} credential_process did not return Version 1.`);if(e.AccessKeyId===void 0||e.SecretAccessKey===void 0)throw Error(`Profile ${r} credential_process returned invalid credentials.`);if(e.Expiration){let l=new Date;if(new Date(e.Expiration)<l)throw Error(`Profile ${r} credential_process returned expired credentials.`)}let s=e.AccountId;!s&&o?.[r]?.aws_account_id&&(s=o[r].aws_account_id);let t=n(n(n(n({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey},e.SessionToken&&{sessionToken:e.SessionToken}),e.Expiration&&{expiration:new Date(e.Expiration)}),e.CredentialScope&&{credentialScope:e.CredentialScope}),s&&{accountId:s});return p(t,"CREDENTIALS_PROCESS","w"),t}});import{exec as h}from"child_process";import{promisify as C}from"util";var m,x=i(()=>{"use strict";S();P();m=async(r,e,o)=>{let s=e[r];if(e[r]){let t=s.credential_process;if(t!==void 0){let l=C(h);try{let{stdout:c}=await l(t),a;try{a=JSON.parse(c.trim())}catch{throw Error(`Profile ${r} credential_process returned invalid JSON.`)}return w(r,a,e)}catch(c){throw new d(c.message,{logger:o})}}else throw new d(`Profile ${r} did not contain credential_process.`,{logger:o})}else throw new d(`Profile ${r} could not be found in shared credentials file.`,{logger:o})}});var b,E=i(()=>{"use strict";_();x();b=(r={})=>async()=>{r.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");let e=await u(r);return m(f(r),e,r.logger)}});var A=i(()=>{E()});export{b as a,A as b};
