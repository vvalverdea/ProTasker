import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{a as S,b as K,c as $,d as se}from"./chunk-OXRWZM6G.mjs";import{a as h,b as d,g as v}from"./chunk-WHYOH54Q.mjs";import{a,b as s,e as i}from"./chunk-YJ4N4I6Q.mjs";import{Buffer as ie}from"buffer";import{request as ce}from"http";function E(e){return new Promise((t,n)=>{let o=ce(s(a({method:"GET"},e),{hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")}));o.on("error",r=>{n(Object.assign(new h("Unable to connect to instance metadata service"),r)),o.destroy()}),o.on("timeout",()=>{n(new h("TimeoutError from instance metadata service")),o.destroy()}),o.on("response",r=>{let{statusCode:c=400}=r;(c<200||300<=c)&&(n(Object.assign(new h("Error response received from instance metadata service"),{statusCode:c})),o.destroy());let _=[];r.on("data",l=>{_.push(l)}),r.on("end",()=>{t(ie.concat(_)),o.destroy()})}),o.end()})}var C=i(()=>{"use strict";v()});var O,D,y=i(()=>{"use strict";O=e=>!!e&&typeof e=="object"&&typeof e.AccessKeyId=="string"&&typeof e.SecretAccessKey=="string"&&typeof e.Token=="string"&&typeof e.Expiration=="string",D=e=>a({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)},e.AccountId&&{accountId:e.AccountId})});var Fe,Le,w,x=i(()=>{"use strict";Fe=1e3,Le=0,w=({maxRetries:e=0,timeout:t=1e3})=>({maxRetries:e,timeout:t})});var N,P=i(()=>{"use strict";N=(e,t)=>{let n=e();for(let o=0;o<t;o++)n=n.catch(e);return n}});import{parse as de}from"url";var R,b,B,qe,le,pe,me,fe,Ee,G=i(()=>{"use strict";v();C();y();x();P();R="AWS_CONTAINER_CREDENTIALS_FULL_URI",b="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",B="AWS_CONTAINER_AUTHORIZATION_TOKEN",qe=(e={})=>{let{timeout:t,maxRetries:n}=w(e);return()=>N(async()=>{let o=await Ee({logger:e.logger}),r=JSON.parse(await le(t,o));if(!O(r))throw new d("Invalid response received from instance metadata service.",{logger:e.logger});return D(r)},n)},le=async(e,t)=>(process.env[B]&&(t.headers=s(a({},t.headers),{Authorization:process.env[B]})),(await E(s(a({},t),{timeout:e}))).toString()),pe="169.254.170.2",me={localhost:!0,"127.0.0.1":!0},fe={"http:":!0,"https:":!0},Ee=async({logger:e})=>{if(process.env[b])return{hostname:pe,path:process.env[b]};if(process.env[R]){let t=de(process.env[R]);if(!t.hostname||!(t.hostname in me))throw new d(`${t.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!t.protocol||!(t.protocol in fe))throw new d(`${t.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return s(a({},t),{port:t.port?parseInt(t.port,10):void 0})}throw new d(`The container metadata credential provider cannot be used unless the ${b} or ${R} environment variable is set`,{tryNextLink:!1,logger:e})}});var M,q=i(()=>{"use strict";v();M=class e extends d{constructor(t,n=!0){super(t,n),this.tryNextLink=n,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,e.prototype)}}});var g,F=i(()=>{"use strict";g=function(e){return e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]",e}(g||{})});var Ie,_e,H,j=i(()=>{"use strict";Ie="AWS_EC2_METADATA_SERVICE_ENDPOINT",_e="ec2_metadata_service_endpoint",H={environmentVariableSelector:e=>e[Ie],configFileSelector:e=>e[_e],default:void 0}});var I,L=i(()=>{"use strict";I=function(e){return e.IPv4="IPv4",e.IPv6="IPv6",e}(I||{})});var ue,Te,Y,J=i(()=>{"use strict";L();ue="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",Te="ec2_metadata_service_endpoint_mode",Y={environmentVariableSelector:e=>e[ue],configFileSelector:e=>e[Te],default:I.IPv4}});var k,Ae,Se,V=i(()=>{"use strict";K();se();F();j();L();J();k=async()=>$(await Ae()||await Se()),Ae=async()=>S(H)(),Se=async()=>{let e=await S(Y)();switch(e){case I.IPv4:return g.IPv4;case I.IPv6:return g.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(I)}`)}}});var Ne,U,z=i(()=>{"use strict";Ne="https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html",U=(e,t)=>{let n=300+Math.floor(Math.random()*300),o=new Date(Date.now()+n*1e3);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(o)}.
For more information, please visit: `+Ne);let r=e.originalExpiration??e.expiration;return s(a(a({},e),r?{originalExpiration:r}:{}),{expiration:o})}});var X,Z=i(()=>{"use strict";z();X=(e,t={})=>{let n=t?.logger||console,o;return async()=>{let r;try{r=await e(),r.expiration&&r.expiration.getTime()<Date.now()&&(r=U(r,n))}catch(c){if(o)n.warn("Credential renew failed: ",c),r=U(o,n);else throw c}return o=r,r}}});var te,ge,W,Q,ee,Nt,he,ve,Ce,Oe,oe=i(()=>{"use strict";K();v();q();C();y();x();P();V();Z();te="/latest/meta-data/iam/security-credentials/",ge="/latest/api/token",W="AWS_EC2_METADATA_V1_DISABLED",Q="ec2_metadata_v1_disabled",ee="x-aws-ec2-metadata-token",Nt=(e={})=>X(he(e),{logger:e.logger}),he=(e={})=>{let t=!1,{logger:n,profile:o}=e,{timeout:r,maxRetries:c}=w(e),_=async(l,u)=>{if(t||u.headers?.[ee]==null){let p=!1,m=!1,ae=await S({environmentVariableSelector:f=>{let T=f[W];if(m=!!T&&T!=="false",T===void 0)throw new d(`${W} not set in env, checking config file next.`,{logger:e.logger});return m},configFileSelector:f=>{let T=f[Q];return p=!!T&&T!=="false",p},default:!1},{profile:o})();if(e.ec2MetadataV1Disabled||ae){let f=[];throw e.ec2MetadataV1Disabled&&f.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),p&&f.push(`config file profile (${Q})`),m&&f.push(`process environment variable (${W})`),new M(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${f.join(", ")}].`)}}let ne=(await N(async()=>{let p;try{p=await Ce(u)}catch(m){throw m.statusCode===401&&(t=!1),m}return p},l)).trim();return N(async()=>{let p;try{p=await Oe(ne,u,e)}catch(m){throw m.statusCode===401&&(t=!1),m}return p},l)};return async()=>{let l=await k();if(t)return n?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),_(c,s(a({},l),{timeout:r}));{let u;try{u=(await ve(s(a({},l),{timeout:r}))).toString()}catch(A){if(A?.statusCode===400)throw Object.assign(A,{message:"EC2 Metadata token request returned error"});return(A.message==="TimeoutError"||[403,404,405].includes(A.statusCode))&&(t=!0),n?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),_(c,s(a({},l),{timeout:r}))}return _(c,s(a({},l),{headers:{[ee]:u},timeout:r}))}}},ve=async e=>E(s(a({},e),{path:ge,method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}})),Ce=async e=>(await E(s(a({},e),{path:te}))).toString(),Oe=async(e,t,n)=>{let o=JSON.parse((await E(s(a({},t),{path:te+e}))).toString());if(!O(o))throw new d("Invalid response received from instance metadata service.",{logger:n.logger});return D(o)}});var re=i(()=>{"use strict"});var De=i(()=>{G();oe();x();re();C();V();F()});export{E as a,Fe as b,Le as c,w as d,R as e,b as f,B as g,qe as h,g as i,k as j,Nt as k,De as l};
