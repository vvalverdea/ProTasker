import { createRequire } from 'node:module';
globalThis['require'] ??= createRequire(import.meta.url);
import{a as g,b as f,g as m,h as A}from"./chunk-7MLGPFI3.mjs";import{a as p,i as _}from"./chunk-DUU7IDJR.mjs";import{b as o,d as n,f as l,g as c}from"./chunk-WHYOH54Q.mjs";import{e as i}from"./chunk-YJ4N4I6Q.mjs";var C,v,u=i(()=>{"use strict";c();C="AWS_EC2_METADATA_DISABLED",v=async e=>{let{ENV_CMDS_FULL_URI:r,ENV_CMDS_RELATIVE_URI:t,fromContainerMetadata:a,fromInstanceMetadata:s}=await import("./chunk-2K6JVJT2.mjs");if(process.env[t]||process.env[r]){e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");let{fromHttp:d}=await import("./chunk-VNVTYBMD.mjs");return n(d(e),a(e))}return process.env[C]?async()=>{throw new o("EC2 Instance Metadata Service access disabled",{logger:e.logger})}:(e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata"),s(e))}});var S,D,P,h,E=i(()=>{"use strict";A();c();_();u();S=!1,D=(e={})=>l(n(async()=>{if(e.profile??process.env[p])throw process.env[g]&&process.env[f]&&(S||((e.logger?.warn&&e.logger?.constructor?.name!=="NoOpLogger"?e.logger.warn:console.warn)(`@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`),S=!0)),new o("AWS_PROFILE is set, skipping fromEnv provider.",{logger:e.logger,tryNextLink:!0});return e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv"),m(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");let{ssoStartUrl:r,ssoAccountId:t,ssoRegion:a,ssoRoleName:s,ssoSession:d}=e;if(!r&&!t&&!a&&!s&&!d)throw new o("Skipping SSO provider in default chain (inputs do not include SSO fields).",{logger:e.logger});let{fromSSO:w}=await import("./chunk-C3YPXWAZ.mjs");return w(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");let{fromIni:r}=await import("./chunk-GQHZ6YIG.mjs");return r(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");let{fromProcess:r}=await import("./chunk-5QV7ONRM.mjs");return r(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");let{fromTokenFile:r}=await import("./chunk-6YEPKGW2.mjs");return r(e)()},async()=>(e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider"),(await v(e))()),async()=>{throw new o("Could not load credentials from any providers",{tryNextLink:!1,logger:e.logger})}),h,P),P=e=>e?.expiration!==void 0,h=e=>e?.expiration!==void 0&&e.expiration.getTime()-Date.now()<3e5});var I=i(()=>{"use strict";E()});export{D as a,I as b};
